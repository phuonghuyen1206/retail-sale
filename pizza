USE [danny pizza challenge];

CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');
 
 select *
 from runners;

 CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(10),
  "extras" VARCHAR(10),
   order_time DATETIME NULL
);



INSERT INTO customer_orders
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  (1, 101, 1, NULL, NULL, '2020-01-01 18:05:02'),
  (2, 101, 1, NULL, NULL, '2020-01-01 19:00:52'),
  (3, 102, 1, NULL, NULL, '2020-01-02 23:51:23'),
  (3, 102, 2, NULL, NULL, '2020-01-02 23:51:23'),
  (4, 103, 1, '4', NULL, '2020-01-04 13:23:46'),
  (4, 103, 1, '4', NULL, '2020-01-04 13:23:46'),
  (4, 104, 2, '4', NULL, '2020-01-04 13:23:46'),
  (5, 104, 1, NULL, '1', '2020-01-08 21:00:29'),
  (6, 101, 2, NULL, NULL, '2020-01-08 21:03:13'),
  (7, 105, 2, NULL, '1', '2020-01-08 21:20:29'),
  (8, 102, 1, NULL, NULL, '2020-01-09 23:54:33'),
  (9, 103, 1, '4', '1, 5', '2020-01-10 11:22:59'),
  (10, 104, 1, NULL, NULL, '2020-01-11 18:34:49'),
  (10, 104, 1, '2, 6', '1, 4', '2020-01-11 18:34:49');

  select *
  from customer_orders


CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" DATETIME,        
  "distance" VARCHAR(10),        
  "duration" VARCHAR(10),       
  "cancellation" VARCHAR(50)     
);


select *
from runner_orders;

CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" TEXT
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');

  CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');

  CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');


  SELECT  order_id, 
        runner_id,
        CASE 
          WHEN pickup_time LIKE 'null' THEN NULL
          ELSE pickup_time 
          END AS pickup_time,
        CASE 
          WHEN distance LIKE 'null' THEN NULL
          WHEN distance LIKE '%km' THEN TRIM('km' from distance) 
          ELSE distance END AS distance,
        CASE 
          WHEN duration LIKE 'null' THEN NULL 
          WHEN duration LIKE '%mins' THEN TRIM('mins' from duration) 
          WHEN duration LIKE '%minute' THEN TRIM('minute' from duration)        
          WHEN duration LIKE '%minutes' THEN TRIM('minutes' from duration)       
          ELSE duration END AS duration,
        CASE 
          WHEN cancellation LIKE 'null' THEN NULL
          WHEN cancellation = '' THEN NULL
          ELSE cancellation END AS cancellation
FROM runner_orders;
 
 UPDATE runner_orders
SET
  pickup_time = CASE
                  WHEN pickup_time LIKE 'null' THEN NULL
                  ELSE pickup_time
                END,
  distance = CASE
               WHEN distance LIKE 'null' THEN NULL
               WHEN distance LIKE '%km' THEN TRIM('km' FROM distance)
               ELSE distance
             END,
  duration = CASE
               WHEN duration LIKE 'null' THEN NULL
               WHEN duration LIKE '%mins' THEN TRIM('mins' FROM duration)
               WHEN duration LIKE '%minute' THEN TRIM('minute' FROM duration)
               WHEN duration LIKE '%minutes' THEN TRIM('minutes' FROM duration)
               ELSE duration
             END,
  cancellation = CASE
                   WHEN cancellation LIKE 'null' THEN NULL
				   WHEN cancellation = '' THEN NULL
                   ELSE cancellation
                 END;

select *
from runner_orders

SELECT order_id, 
        customer_id,
        pizza_id, 
        CASE WHEN exclusions = '' OR exclusions like 'null' THEN NULL
            ELSE exclusions END AS exclusions,
        CASE WHEN extras = '' OR extras like 'null' THEN NULL
            ELSE extras END AS extras, 
        order_time
FROM customer_orders;

UPDATE customer_orders
SET  exclusions = CASE 
                   WHEN exclusions = '' OR exclusions like 'null' THEN NULL
                   ELSE exclusions END,
	extras = CASE 
	          WHEN extras = '' OR extras like 'null' THEN NULL
              ELSE extras END;
   select * 
   from customer_orders;

   --A Pizza Metric
   --1 How many pizzas were ordered?
   
   Select Count(pizza_id) As "Total Number Of Pizza Ordered"
   From customer_orders

   --2 How many unique customer orders were made?

   Select Count(Distinct order_id) As "Number Of Unique Orders"
   from customer_orders

   --3 How many successful orders were delivered by each runner?
   select *
   from runner_orders

   Select runner_id, Count(runner_id) As "Number Of Successful Orders"
   From runner_orders
   Where cancellation is NULL
   Group by runner_id

   --4 How many of each type of pizza was delivered?
  
SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'pizza_names' AND COLUMN_NAME = 'pizza_name';

ALTER TABLE pizza_names
ALTER COLUMN pizza_name NVARCHAR(MAX);

SELECT p.pizza_name, COUNT(c.pizza_id) AS order_count
FROM customer_orders c
JOIN runner_orders r
  ON c.order_id = r.order_id
JOIN pizza_names p
  ON c.pizza_id = p.pizza_id
WHERE cancellation is NULL
GROUP BY p.pizza_name;

--5 How many Vegetarian and Meatlovers were ordered by each customer?
   select *
   from runner_orders;
   select * 
   from customer_orders;
   select *
   from pizza_names;

SELECT c.customer_id,p.pizza_name, COUNT(c.pizza_id) AS order_count
FROM customer_orders c
JOIN runner_orders r
  ON c.order_id = r.order_id
JOIN pizza_names p
  ON c.pizza_id = p.pizza_id
WHERE cancellation is NULL
GROUP BY c.customer_id, p.pizza_name;

--6 What was the maximum number of pizzas delivered in a single order?
select *
   from runner_orders;
select * 
   from customer_orders;
   
Select Top 1 ro.order_id, count(pizza_id)
from customer_orders co
join runner_orders ro
on co.order_id = ro.order_id
where cancellation is null
group by ro.order_id
order by count(pizza_id) DESC

--7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
--at least 1 change -> either exclusion or extras
--no changes -> exclusion and extras are NULL

select co.customer_id,
      SUM(CASE WHEN exclusions is  not null or extras is not null then 1 else 0 end) change_in_pizza,
	  SUM(CASE WHEN exclusions is null and extras is null then 1 else 0 end) no_change_in_pizza
from customer_orders co
join runner_orders ro
on co.order_id = ro.order_id
where cancellation is null
GROUP BY co.customer_id

--8. How many pizzas were delivered that had both exclusions and extras?
select *
from pizza_toppings;
select *
from pizza_recipes

select co.customer_id,
      SUM(CASE WHEN exclusions is  not null and extras is not null then 1 else 0 end) both_change_in_pizza
FROM customer_orders co	
join runner_orders ro
on co.order_id = ro.order_id
where cancellation is null
GROUP BY co.customer_id

--9. What was the total volume of pizzas ordered for each hour of the day?
SELECT DATEPART(HOUR, order_time) as Order_Hour, COUNT(co.order_id) AS Total_Volume
FROM customer_orders co	
JOIN runner_orders ro
ON co.order_id = ro.order_id
GROUP BY DATEPART(HOUR, order_time)

--10 What was the volume of orders for each day of the week?

SELECT DATENAME(WEEKDAY,order_time) AS day_of_week,
       COUNT(order_id) AS Total_Volume
FROM customer_orders
GROUP BY DATENAME(WEEKDAY,order_time)

--B. Runner and Customer Experience

--1 How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)

SELECT *
FROM runners

SELECT DATEPART(WEEKDAY,order_time) AS day_of_week,
       COUNT(order_id) AS Total_Volume
FROM customer_orders
GROUP BY DATEPART(WEEKDAY,order_time)

--2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT *
FROM runner_orders
SELECT *
FROM customer_orders

SELECT r.runner_id, ROUND(AVG(DATEDIFF(MINUTE, order_time, pickup_time)),2) AS avg_runner_pickup_time
FROM runner_orders r
JOIN customer_orders c
ON r.order_id = c.order_id
WHERE cancellation IS NULL
GROUP BY r.runner_id

--3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
WITH cte AS 
(SELECT r.order_id, COUNT(c.order_id) AS pizza_order_counts, DATEDIFF(MINUTE, c.order_time, r.pickup_time) AS prep_time
FROM runner_orders r
JOIN customer_orders c
ON r.order_id = c.order_id
WHERE cancellation IS NULL
GROUP BY r.order_id,  DATEDIFF(MINUTE, c.order_time, r.pickup_time))
--ORDER BY r.order_id ASC)

SELECT pizza_order_counts, ROUND(AVG(prep_time),2)
FROM cte
GROUP BY pizza_order_counts

--4. What was the average distance travelled for each customer?
SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'runner_orders' AND COLUMN_NAME = 'distance';

--ALTER TABLE pizza_names
--ALTER COLUMN pizza_name NVARCHAR(MAX); có thể kiểm tra rồi đỗi lị dữ liệu thành int hoặc float như cách ở trên
-- nhưng bây giờ mình muốn dùng cách không cần phỉ chuyển hết toàn bộ dữ liệu gốc đó chính là dùng cast

SELECT 
    co.customer_id, 
    ROUND(AVG(CAST(ro.distance AS FLOAT)), 2) AS average_distance_travelled
FROM runner_orders ro
JOIN customer_orders co
    ON ro.order_id = co.order_id
WHERE cancellation IS NULL
GROUP BY co.customer_id;

--5. What was the difference between the longest and shortest delivery times for all orders?
SELECT MIN(CAST(duration AS float)) minimum_duration,
       MAX(CAST(duration AS float)) AS maximum_duration,
       MAX(CAST(duration AS float)) - MIN(CAST(duration AS float)) AS maximum_difference
FROM runner_orders

--6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'runner_orders' AND COLUMN_NAME = 'distance';

ALTER TABLE runner_orders
ALTER COLUMN distance float;

SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'runner_orders' AND COLUMN_NAME = 'duration';

ALTER TABLE runner_orders
ALTER COLUMN duration float;

SELECT runner_id,
       distance AS distance_km,
       round(duration/60, 2) AS duration_hr,
       round(distance/(duration/60), 2) AS average_speed
FROM runner_orders
WHERE cancellation IS NULL
ORDER BY runner_id;

--7. What is the successful delivery percentage for each runner?
WITH CTE AS
(SELECT runner_id, SUM(CASE WHEN cancellation IS NULL THEN 1 ELSE 0 END) AS delivered_orders,
       COUNT(*) AS Total_delivery
FROM runner_orders
GROUP BY runner_id)
--ORDER BY runner_id)

SELECT runner_id,delivered_orders,Total_delivery, ROUND(delivered_orders*100/Total_delivery,2) AS delivery_success_percentage
FROM CTE

WITH CTE AS
(SELECT runner_id, COUNT(pickup_time) AS delivered_orders,
       COUNT(*) AS Total_delivery
FROM runner_orders
GROUP BY runner_id)
--ORDER BY runner_id)

SELECT runner_id,delivered_orders,Total_delivery, ROUND(delivered_orders*100/Total_delivery,2) AS delivery_success_percentage
FROM CTE

-- C. Ingredient Optimisation
SELECT *
FROM runner_orders
SELECT *
FROM customer_orders
SELECT * 
FROM pizza_recipes
SELECT *
FROM pizza_toppings

SELECT pizza_id, 
        RTRIM(topping_id.value) as topping_id,
       topping_name
INTO #pizza_recipes  
FROM pizza_recipes p
CROSS APPLY string_split(p.toppings, ',') as topping_id
INNER JOIN pizza_toppings p2 ON TRIM(topping_id.value) = p2.topping_id

SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'pizza_recipes' AND COLUMN_NAME = 'toppings';

ALTER TABLE pizza_recipes
ALTER COLUMN toppings VARCHAR(MAX);

SELECT * FROM #pizza_recipes;

ALTER TABLE customer_orders
ADD record_id INT IDENTITY(1,1)

SELECT *
FROM customer_orders

SELECT		
      c.record_id,
      TRIM(ext.value) AS topping_id
INTO #extras
FROM customer_orders as c
CROSS APPLY string_split(c.extras, ',') as ext;

select *
from #extras

SELECT	c.record_id,
	      TRIM(ex.value) AS topping_id
INTO #exclusions
FROM customer_orders as c
CROSS APPLY string_split(c.exclusions, ',') as ex;

select *
from #exclusions

select *
from #extras

--1. What are the standard ingredients for each pizza?

SELECT pizza_id, STRING_AGG(topping_name,',') AS Standard_toppings
FROM #pizza_recipes
GROUP BY pizza_id

ALTER TABLE #pizza_recipes
ALTER COLUMN topping_name VARCHAR(MAX);

--2. What was the most commonly added extra?
select * 
from #extras
select *
from #exclusions
SELECT * FROM #pizza_recipes

SELECT  TOP 1 e.topping_id, pr.topping_name, COUNT(e.topping_id) AS extra_topping_times
FROM #extras e
JOIN #pizza_recipes pr
ON e.topping_id = pr.topping_id
GROUP BY e.topping_id,pr.topping_name
ORDER BY COUNT(e.topping_id) DESC

--3. What was the most commonly exclusion?

SELECT  TOP 1 e.topping_id, pr.topping_name, COUNT(e.topping_id) AS extra_topping_times
FROM #exclusions e
JOIN #pizza_recipes pr
ON e.topping_id = pr.topping_id
GROUP BY e.topping_id,pr.topping_name
ORDER BY COUNT(e.topping_id) DESC

--4. Generate an order item for each record in the customers_orders table in the format of one of the following:


ALTER TABLE pizza_toppings
ALTER COLUMN topping_name VARCHAR(MAX);


SELECT*
INTO #customer_orders  
FROM customer_orders

select *
from #customer_orders

WITH cte_exclude AS 
(SELECT  e.record_id, CONCAT(' - Exclude ', STRING_AGG(p.topping_name,', ')) as optional 
FROM #exclusions e 
JOIN pizza_toppings p
ON e.topping_id = p.topping_id
GROUP BY e.record_id),

cte_extra AS 

(SELECT  e.record_id, CONCAT(' - Extras ', STRING_AGG(p.topping_name,', ')) AS optional
FROM #extras e
JOIN pizza_toppings p
ON e.topping_id = p.topping_id
GROUP BY e.record_id),

union_cte as(
select * from cte_exclude
union
select * from cte_extra)

select c.record_id,c.order_id, CONCAT(p.pizza_name,STRING_AGG(optional,', ')) as list
from #customer_orders c
inner join pizza_names p 
on c.pizza_id = p.pizza_id 
left join union_cte u
on c.record_id = u.record_id 
group by c.record_id, c.order_id, p.pizza_name

--5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders
--table and add a 2x in front of any relevant ingredients . For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"

select *
from pizza_toppings

select * 
from #pizza_recipes


with cte as(
select cu.record_id,p1.pizza_name,
case when
    p.topping_id in( SELECT topping_id FROM #extras e WHERE cu.record_id = e.record_id ) then 'X2'+ p.topping_name
    ELSE p.topping_name
    END AS topping
from #customer_orders cu inner join #pizza_recipes p
on cu.pizza_id = p.pizza_id
inner join pizza_names p1
on cu.pizza_id = p1.pizza_id

)
select cu.record_id, CONCAT(c.pizza_name +':' ,STRING_AGG(topping, ',' )) as list
from #customer_orders cu
inner join cte c
on cu.record_id = c.record_id
group by cu. record_id,c.pizza_name
order by cu.record_id

--6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

WITH INGREDIENT_CTE AS (
SELECT record_id,
pizza_name, 
topping_name,
 CASE WHEN p1.topping_id in (
                             SELECT topping_id
                             FROM #extras e
                             WHERE C.record_id = e.record_id
                             ) THEN 2
ELSE 1
END AS times_used_topping
FROM #customer_orders c 
JOIN pizza_names p2 ON c.pizza_id = p2.pizza_id
JOIN #pizza_recipes p1 ON c.pizza_id = p1.pizza_id
JOIN runner_orders r ON c.order_id = r.order_id
WHERE p1.topping_id NOT IN (SELECT topping_id 
FROM #exclusions e 
 WHERE e.record_id = c.record_id) 
 and r.cancellation is NULL
)

SELECT topping_name, 
SUM(times_used_topping) AS times_used_topping
from INGREDIENT_CTE
GROUP BY topping_name
order by times_used_topping desc;
